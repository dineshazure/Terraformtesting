data "azurerm_subnet" "storage_private_endpoint_subnet" {

  for_each             = var.private_storage_account
  name                 = each.value["storage_private_endpoint_subnet"]
  virtual_network_name = each.value["storage_virtual_network_name"]
  resource_group_name  = each.value["storage_virtual_network_resource_group_name"]

}
data "azurerm_private_dns_zone" "file_private_dns_zone" {
  
  for_each            = var.private_storage_account
  name                = each.value["file_private_dns_zone_name"]
  resource_group_name = each.value["file_private_dns_zone_resource_group_name"]

}

resource "azurerm_storage_account" "storageaccount" {

  for_each                        = var.private_storage_account
  name                            = each.value["storageaccount_name"]
  resource_group_name             = each.value["storageaccount_resource_group_name"]
  location                        = var.location
  account_tier                    = each.value["storageaccount_account_tier"]
  account_replication_type        = each.value["storageaccount_account_replication_type"]
  min_tls_version                 = each.value["storageaccount_min_tls_version"]
  public_network_access_enabled   = each.value["storageaccount_public_network_access_enabled"]
  allow_nested_items_to_be_public = each.value["storageaccount_allow_nested_items_to_be_public"]
  tags                            = var.tags
}

resource "azurerm_storage_share" "fileshare" {
  for_each             = var.private_storage_account
  name                 = each.value["storageaccout_fileshare_name"]
  storage_account_name = azurerm_storage_account.storageaccount[each.key].name
  quota                = 5120

}

resource "azurerm_private_endpoint" "storageaccount_privateendpoint" {

  depends_on = [
    azurerm_storage_account.storageaccount
  ]
  for_each            = var.private_storage_account
  name                = each.value["storageaccount_privateendpoint_name"]
  location            = var.location
  resource_group_name = var.resource_group_name
  subnet_id           = data.azurerm_subnet.storage_private_endpoint_subnet[each.key].id
  tags                = var.tags

  private_dns_zone_group {
    name                 = "storageaccount-private-dns-zone-group"
    private_dns_zone_ids = [data.azurerm_private_dns_zone.file_private_dns_zone[each.key].id]
  }

  private_service_connection {
    name                           = "storageaccount-privateserviceconnection"
    private_connection_resource_id = azurerm_storage_account.storageaccount[each.key].id
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

}


data "azurerm_subnet" "storage_private_endpoint_subnet" {
  
  depends_on = [ module.vnet_and_subnets ]
  for_each             = var.private_storage_account
  name                 = each.value["storage_private_endpoint_subnet"]
  virtual_network_name = each.value["storage_virtual_network_name"]
  resource_group_name  = each.value["storage_virtual_network_resource_group_name"]

}

data "azurerm_private_dns_zone" "file_private_dns_zone" {
  
  depends_on = [ module.vnet_and_subnets ]
  provider = azurerm.DNSZone_provider
  for_each            = var.private_storage_account
  name                = each.value["file_private_dns_zone_name"]
  resource_group_name = each.value["file_private_dns_zone_resource_group_name"]

}

module "resource_group" {
  source              = "../../iac-modules/create-rgs"
  resource_group_name = var.resource_group_name
  location            = var.location
  tags                = var.tags
  csv_file_name       = var.csv_file_name_rg
  # lock_type = var.lock_type
}


# this file will drive the deployment of vnets, subnets, nsgs and their associations
module "vnet_and_subnets" {

  depends_on = [module.resource_group]

  # In the module, driven by this main.tf, we are going to create a vnet, its subnets,
  # the nsgs associated with the subnets, as well as the subnet-nsg associations.

  # The following variables are needed for vnets&subnets , as well as for nsgs

  source              = "../../iac-modules/create-vnet-subnets-nsgs"
  resource_group_name = var.resource_group_name
  location            = var.location

  # the following variables are needed for vnet & subnets only
  # the processing for vnet&subnets is done within a single config file in modules

  csv_file_name        = var.csv_file_name
  address_space        = var.address_space
  dns_servers          = var.dns_servers
  vnet_name            = var.vnet_name
  ddos_protection_plan = var.ddos_protection_plan

  # nsg_directory_name is the name of the directory with the csv files for
  # all nsgs (one csv per nsg, and the name of the nsg = name of the file)

  nsg_directory_name = var.nsg_directory_name
}

# the snet_name_id_map is needed to build snet-nsg mapping
output "snet_name_id_map" {
  value = module.vnet_and_subnets.snet_name_id_map
}
# the vnet_name_id_map is needed to build vnet peerings
output "vnet_name_id_map" {
  value = module.vnet_and_subnets.vnet_name_id_map
}
output "nsg_name_id_map" {
  value = module.vnet_and_subnets.nsg_name_id_map
}
output "processed_csvs" {
  value = module.vnet_and_subnets.processed_csvs
}
output "snet_nsg_common_elements" {
  value = module.vnet_and_subnets.snet_nsg_common_elements
}
output "snets_without_nsg" {
  value = module.vnet_and_subnets.snets_without_nsg
}
output "nsgs_without_snet" {
  value = module.vnet_and_subnets.nsgs_without_snet
}
/*
output "combined_contents" {
 value = module.vnet_and_subnets.combined_contents
}
*/


module "StorageAccount" {
   
  depends_on = [ module.vnet_and_subnets ]
  source                  = "../../iac-modules/create-storage-account-with-privateendpoint/v1.0.0"
  location                = var.location
  resource_group_name     = var.resource_group_name
  private_storage_account = var.private_storage_account
  DNSZone_sub = var.DNSZone_sub
  tags        = var.tag

}

  resource "azurerm_private_endpoint" "storageaccount_privateendpoint" {

  depends_on = [ module.vnet_and_subnets ]

  for_each            = var.private_storage_account
  name                = each.value["storageaccount_privateendpoint_name"]
  location            = var.location
  resource_group_name = var.resource_group_name
  subnet_id           = data.azurerm_subnet.storage_private_endpoint_subnet[each.key].id
  tags                = var.tag

  private_dns_zone_group {
    name                 = "storageaccount-private-dns-zone-group"
    private_dns_zone_ids = [data.azurerm_private_dns_zone.file_private_dns_zone[each.key].id]
  }

  private_service_connection {
    name                           = "storageaccount-privateserviceconnection"
    private_connection_resource_id = module.StorageAccount.storage_account_ids[0]
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

}


